/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/about";
exports.ids = ["pages/about"];
exports.modules = {

/***/ "./node_modules/next/dist/client/future/image.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/future/image.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = Image;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _head = _interopRequireDefault(__webpack_require__(/*! ../../shared/lib/head */ \"../shared/lib/head\"));\nvar _imageConfig = __webpack_require__(/*! ../../shared/lib/image-config */ \"../shared/lib/image-config\");\nvar _imageConfigContext = __webpack_require__(/*! ../../shared/lib/image-config-context */ \"../shared/lib/image-config-context\");\nvar _utils = __webpack_require__(/*! ../../shared/lib/utils */ \"../utils\");\nfunction Image(_param) {\n    var { src , sizes , unoptimized =false , priority =false , loading , className , quality , width , height , style , onLoadingComplete , placeholder =\"empty\" , blurDataURL  } = _param, all = _objectWithoutPropertiesLoose(_param, [\n        \"src\",\n        \"sizes\",\n        \"unoptimized\",\n        \"priority\",\n        \"loading\",\n        \"className\",\n        \"quality\",\n        \"width\",\n        \"height\",\n        \"style\",\n        \"onLoadingComplete\",\n        \"placeholder\",\n        \"blurDataURL\"\n    ]);\n    if (!experimentalFuture && \"development\" !== \"test\") {\n        throw new Error(`The \"next/future/image\" component is experimental and may be subject to breaking changes. To enable this experiment, please include \\`experimental: { images: { allowFutureImage: true } }\\` in your next.config.js file.`);\n    }\n    const configContext = (0, _react).useContext(_imageConfigContext.ImageConfigContext);\n    const config = (0, _react).useMemo(()=>{\n        const c = configEnv || configContext || _imageConfig.imageConfigDefault;\n        const allSizes = [\n            ...c.deviceSizes,\n            ...c.imageSizes\n        ].sort((a, b)=>a - b);\n        const deviceSizes = c.deviceSizes.sort((a, b)=>a - b);\n        return _extends({}, c, {\n            allSizes,\n            deviceSizes\n        });\n    }, [\n        configContext\n    ]);\n    let rest = all;\n    let loader = defaultLoader;\n    if (\"loader\" in rest) {\n        if (rest.loader) {\n            const customImageLoader = rest.loader;\n            var _tmp;\n            _tmp = (obj)=>{\n                const { config: _  } = obj, opts = _objectWithoutPropertiesLoose(obj, [\n                    \"config\"\n                ]);\n                // The config object is internal only so we must\n                // not pass it to the user-defined loader()\n                return customImageLoader(opts);\n            }, loader = _tmp, _tmp;\n        }\n        // Remove property so it's not spread on <img>\n        delete rest.loader;\n    }\n    let staticSrc = \"\";\n    if (isStaticImport(src)) {\n        const staticImageData = isStaticRequire(src) ? src.default : src;\n        if (!staticImageData.src) {\n            throw new Error(`An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received ${JSON.stringify(staticImageData)}`);\n        }\n        blurDataURL = blurDataURL || staticImageData.blurDataURL;\n        staticSrc = staticImageData.src;\n        height = height || staticImageData.height;\n        width = width || staticImageData.width;\n        if (!staticImageData.height || !staticImageData.width) {\n            throw new Error(`An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received ${JSON.stringify(staticImageData)}`);\n        }\n    }\n    src = typeof src === \"string\" ? src : staticSrc;\n    let isLazy = !priority && (loading === \"lazy\" || typeof loading === \"undefined\");\n    if (src.startsWith(\"data:\") || src.startsWith(\"blob:\")) {\n        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n        unoptimized = true;\n        isLazy = false;\n    }\n    if (experimentalUnoptimized) {\n        unoptimized = true;\n    }\n    const [blurComplete, setBlurComplete] = (0, _react).useState(false);\n    let widthInt = getInt(width);\n    let heightInt = getInt(height);\n    const qualityInt = getInt(quality);\n    if (true) {\n        if (!src) {\n            // React doesn't show the stack trace and there's\n            // no `src` to help identify which image, so we\n            // instead console.error(ref) during mount.\n            unoptimized = true;\n        } else {\n            if (typeof widthInt === \"undefined\") {\n                throw new Error(`Image with src \"${src}\" is missing required \"width\" property.`);\n            } else if (isNaN(widthInt)) {\n                throw new Error(`Image with src \"${src}\" has invalid \"width\" property. Expected a numeric value in pixels but received \"${width}\".`);\n            }\n            if (typeof heightInt === \"undefined\") {\n                throw new Error(`Image with src \"${src}\" is missing required \"height\" property.`);\n            } else if (isNaN(heightInt)) {\n                throw new Error(`Image with src \"${src}\" has invalid \"height\" property. Expected a numeric value in pixels but received \"${height}\".`);\n            }\n            if (!VALID_LOADING_VALUES.includes(loading)) {\n                throw new Error(`Image with src \"${src}\" has invalid \"loading\" property. Provided \"${loading}\" should be one of ${VALID_LOADING_VALUES.map(String).join(\",\")}.`);\n            }\n            if (priority && loading === \"lazy\") {\n                throw new Error(`Image with src \"${src}\" has both \"priority\" and \"loading='lazy'\" properties. Only one should be used.`);\n            }\n            if (\"objectFit\" in rest) {\n                throw new Error(`Image with src \"${src}\" has unknown prop \"objectFit\". This style should be specified using the \"style\" attribute.`);\n            }\n            if (\"objectPosition\" in rest) {\n                throw new Error(`Image with src \"${src}\" has unknown prop \"objectPosition\". This style should be specified using the \"style\" attribute.`);\n            }\n            if (placeholder === \"blur\") {\n                if ((widthInt || 0) * (heightInt || 0) < 1600) {\n                    (0, _utils).warnOnce(`Image with src \"${src}\" is smaller than 40x40. Consider removing the \"placeholder='blur'\" property to improve performance.`);\n                }\n                if (!blurDataURL) {\n                    const VALID_BLUR_EXT = [\n                        \"jpeg\",\n                        \"png\",\n                        \"webp\",\n                        \"avif\"\n                    ] // should match next-image-loader\n                    ;\n                    throw new Error(`Image with src \"${src}\" has \"placeholder='blur'\" property but is missing the \"blurDataURL\" property.\n            Possible solutions:\n              - Add a \"blurDataURL\" property, the contents should be a small Data URL to represent the image\n              - Change the \"src\" property to a static import with one of the supported file types: ${VALID_BLUR_EXT.join(\",\")}\n              - Remove the \"placeholder\" property, effectively no blur effect\n            Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url`);\n                }\n            }\n            if (\"ref\" in rest) {\n                (0, _utils).warnOnce(`Image with src \"${src}\" is using unsupported \"ref\" property. Consider using the \"onLoadingComplete\" property instead.`);\n            }\n            if (!unoptimized && loader !== defaultLoader) {\n                const urlStr = loader({\n                    config,\n                    src,\n                    width: widthInt || 400,\n                    quality: qualityInt || 75\n                });\n                let url;\n                try {\n                    url = new URL(urlStr);\n                } catch (err) {}\n                if (urlStr === src || url && url.pathname === src && !url.search) {\n                    (0, _utils).warnOnce(`Image with src \"${src}\" has a \"loader\" property that does not implement width. Please implement it or use the \"unoptimized\" property instead.` + `\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width`);\n                }\n            }\n            if (false) {}\n        }\n    }\n    const imgStyle = Object.assign({}, style);\n    const svgBlurPlaceholder = `url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http%3A//www.w3.org/2000/svg' viewBox='0 0 ${widthInt} ${heightInt}'%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='50'/%3E%3CfeComponentTransfer%3E%3CfeFuncA type='discrete' tableValues='1 1'/%3E%3C/feComponentTransfer%3E%3C/filter%3E%3Cimage filter='url(%23b)' x='0' y='0' height='100%25' width='100%25' href='${blurDataURL}'/%3E%3C/svg%3E\")`;\n    const blurStyle = placeholder === \"blur\" && !blurComplete ? _extends({\n        backgroundSize: imgStyle.objectFit || \"cover\",\n        backgroundPosition: imgStyle.objectPosition || \"0% 0%\"\n    }, (blurDataURL == null ? void 0 : blurDataURL.startsWith(\"data:image\")) ? {\n        backgroundImage: svgBlurPlaceholder\n    } : {\n        filter: \"blur(20px)\",\n        backgroundImage: `url(\"${blurDataURL}\")`\n    }) : {};\n    const imgAttributes = generateImgAttrs({\n        config,\n        src,\n        unoptimized,\n        width: widthInt,\n        quality: qualityInt,\n        sizes,\n        loader\n    });\n    let srcString = src;\n    if (true) {\n        if (false) {}\n    }\n    let imageSrcSetPropName = \"imagesrcset\";\n    let imageSizesPropName = \"imagesizes\";\n    if (true) {\n        imageSrcSetPropName = \"imageSrcSet\";\n        imageSizesPropName = \"imageSizes\";\n    }\n    const linkProps = {\n        // Note: imagesrcset and imagesizes are not in the link element type with react 17.\n        [imageSrcSetPropName]: imgAttributes.srcSet,\n        [imageSizesPropName]: imgAttributes.sizes\n    };\n    const onLoadingCompleteRef = (0, _react).useRef(onLoadingComplete);\n    (0, _react).useEffect(()=>{\n        onLoadingCompleteRef.current = onLoadingComplete;\n    }, [\n        onLoadingComplete\n    ]);\n    const imgElementArgs = _extends({\n        isLazy,\n        imgAttributes,\n        heightInt,\n        widthInt,\n        qualityInt,\n        className,\n        imgStyle,\n        blurStyle,\n        loading,\n        config,\n        unoptimized,\n        placeholder,\n        loader,\n        srcString,\n        onLoadingCompleteRef,\n        setBlurComplete,\n        noscriptSizes: sizes\n    }, rest);\n    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(ImageElement, Object.assign({}, imgElementArgs)), priority ? // for browsers that do not support `imagesrcset`, and in those cases\n    // it would likely cause the incorrect image to be preloaded.\n    //\n    // https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset\n    /*#__PURE__*/ _react.default.createElement(_head.default, null, /*#__PURE__*/ _react.default.createElement(\"link\", Object.assign({\n        key: \"__nimg-\" + imgAttributes.src + imgAttributes.srcSet + imgAttributes.sizes,\n        rel: \"preload\",\n        as: \"image\",\n        href: imgAttributes.srcSet ? undefined : imgAttributes.src\n    }, linkProps))) : null);\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nconst { experimentalFuture =false , experimentalRemotePatterns =[] , experimentalUnoptimized ,  } = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"experimentalFuture\":true,\"domains\":[]} || {};\nconst configEnv = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"experimentalFuture\":true,\"domains\":[]};\nconst allImgs = new Map();\nlet perfObserver;\nif (true) {\n    global.__NEXT_IMAGE_IMPORTED = true;\n}\nconst VALID_LOADING_VALUES = [\n    \"lazy\",\n    \"eager\",\n    undefined\n];\nfunction isStaticRequire(src) {\n    return src.default !== undefined;\n}\nfunction isStaticImageData(src) {\n    return src.src !== undefined;\n}\nfunction isStaticImport(src) {\n    return typeof src === \"object\" && (isStaticRequire(src) || isStaticImageData(src));\n}\nfunction getWidths({ deviceSizes , allSizes  }, width, sizes) {\n    if (sizes) {\n        // Find all the \"vw\" percent sizes used in the sizes prop\n        const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g;\n        const percentSizes = [];\n        for(let match; match = viewportWidthRe.exec(sizes); match){\n            percentSizes.push(parseInt(match[2]));\n        }\n        if (percentSizes.length) {\n            const smallestRatio = Math.min(...percentSizes) * 0.01;\n            return {\n                widths: allSizes.filter((s)=>s >= deviceSizes[0] * smallestRatio),\n                kind: \"w\"\n            };\n        }\n        return {\n            widths: allSizes,\n            kind: \"w\"\n        };\n    }\n    if (typeof width !== \"number\") {\n        return {\n            widths: deviceSizes,\n            kind: \"w\"\n        };\n    }\n    const widths = [\n        ...new Set(// > are actually 3x in the green color, but only 1.5x in the red and\n        // > blue colors. Showing a 3x resolution image in the app vs a 2x\n        // > resolution image will be visually the same, though the 3x image\n        // > takes significantly more data. Even true 3x resolution screens are\n        // > wasteful as the human eye cannot see that level of detail without\n        // > something like a magnifying glass.\n        // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n        [\n            width,\n            width * 2 /*, width * 3*/ \n        ].map((w)=>allSizes.find((p)=>p >= w) || allSizes[allSizes.length - 1])), \n    ];\n    return {\n        widths,\n        kind: \"x\"\n    };\n}\nfunction generateImgAttrs({ config , src , unoptimized , width , quality , sizes , loader  }) {\n    if (unoptimized) {\n        return {\n            src,\n            srcSet: undefined,\n            sizes: undefined\n        };\n    }\n    const { widths , kind  } = getWidths(config, width, sizes);\n    const last = widths.length - 1;\n    return {\n        sizes: !sizes && kind === \"w\" ? \"100vw\" : sizes,\n        srcSet: widths.map((w, i)=>`${loader({\n                config,\n                src,\n                quality,\n                width: w\n            })} ${kind === \"w\" ? w : i + 1}${kind}`).join(\", \"),\n        // It's intended to keep `src` the last attribute because React updates\n        // attributes in order. If we keep `src` the first one, Safari will\n        // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n        // updated by React. That causes multiple unnecessary requests if `srcSet`\n        // and `sizes` are defined.\n        // This bug cannot be reproduced in Chrome or Firefox.\n        src: loader({\n            config,\n            src,\n            quality,\n            width: widths[last]\n        })\n    };\n}\nfunction getInt(x) {\n    if (typeof x === \"number\" || typeof x === \"undefined\") {\n        return x;\n    }\n    if (typeof x === \"string\" && /^[0-9]+$/.test(x)) {\n        return parseInt(x, 10);\n    }\n    return NaN;\n}\n// See https://stackoverflow.com/q/39777833/266535 for why we use this ref\n// handler instead of the img's onLoad attribute.\nfunction handleLoading(img, src, placeholder, onLoadingCompleteRef, setBlurComplete) {\n    if (!img || img[\"data-loaded-src\"] === src) {\n        return;\n    }\n    img[\"data-loaded-src\"] = src;\n    const p = \"decode\" in img ? img.decode() : Promise.resolve();\n    p.catch(()=>{}).then(()=>{\n        if (!img.parentNode) {\n            // Exit early in case of race condition:\n            // - onload() is called\n            // - decode() is called but incomplete\n            // - unmount is called\n            // - decode() completes\n            return;\n        }\n        if (placeholder === \"blur\") {\n            setBlurComplete(true);\n        }\n        if (onLoadingCompleteRef == null ? void 0 : onLoadingCompleteRef.current) {\n            const { naturalWidth , naturalHeight  } = img;\n            // Pass back read-only primitive values but not the\n            // underlying DOM element because it could be misused.\n            onLoadingCompleteRef.current({\n                naturalWidth,\n                naturalHeight\n            });\n        }\n        if (true) {\n            const heightModified = img.height.toString() !== img.getAttribute(\"height\");\n            const widthModified = img.width.toString() !== img.getAttribute(\"width\");\n            if (heightModified && !widthModified || !heightModified && widthModified) {\n                (0, _utils).warnOnce(`Image with src \"${src}\" has either width or height modified, but not the other. If you use CSS to change the size of your image, also include the styles 'width: \"auto\"' or 'height: \"auto\"' to maintain the aspect ratio.`);\n            }\n        }\n    });\n}\nconst ImageElement = (_param)=>{\n    var { imgAttributes , heightInt , widthInt , qualityInt , className , imgStyle , blurStyle , isLazy , placeholder , loading , srcString , config , unoptimized , loader , onLoadingCompleteRef , setBlurComplete , onLoad , onError , noscriptSizes  } = _param, rest = _objectWithoutPropertiesLoose(_param, [\n        \"imgAttributes\",\n        \"heightInt\",\n        \"widthInt\",\n        \"qualityInt\",\n        \"className\",\n        \"imgStyle\",\n        \"blurStyle\",\n        \"isLazy\",\n        \"placeholder\",\n        \"loading\",\n        \"srcString\",\n        \"config\",\n        \"unoptimized\",\n        \"loader\",\n        \"onLoadingCompleteRef\",\n        \"setBlurComplete\",\n        \"onLoad\",\n        \"onError\",\n        \"noscriptSizes\"\n    ]);\n    loading = isLazy ? \"lazy\" : loading;\n    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(\"img\", Object.assign({}, rest, imgAttributes, {\n        width: widthInt,\n        height: heightInt,\n        decoding: \"async\",\n        \"data-nimg\": \"future\",\n        className: className,\n        // @ts-ignore - TODO: upgrade to `@types/react@17`\n        loading: loading,\n        style: _extends({}, imgStyle, blurStyle),\n        ref: (0, _react).useCallback((img)=>{\n            if (true) {\n                if (img && !srcString) {\n                    console.error(`Image is missing required \"src\" property:`, img);\n                }\n            }\n            if (img == null ? void 0 : img.complete) {\n                handleLoading(img, srcString, placeholder, onLoadingCompleteRef, setBlurComplete);\n            }\n        }, [\n            srcString,\n            placeholder,\n            onLoadingCompleteRef,\n            setBlurComplete\n        ]),\n        onLoad: (event)=>{\n            const img = event.currentTarget;\n            handleLoading(img, srcString, placeholder, onLoadingCompleteRef, setBlurComplete);\n            if (onLoad) {\n                onLoad(event);\n            }\n        },\n        onError: (event)=>{\n            if (placeholder === \"blur\") {\n                // If the real image fails to load, this will still remove the placeholder.\n                setBlurComplete(true);\n            }\n            if (onError) {\n                onError(event);\n            }\n        }\n    })), placeholder === \"blur\" && /*#__PURE__*/ _react.default.createElement(\"noscript\", null, /*#__PURE__*/ _react.default.createElement(\"img\", Object.assign({}, rest, generateImgAttrs({\n        config,\n        src: srcString,\n        unoptimized,\n        width: widthInt,\n        quality: qualityInt,\n        sizes: noscriptSizes,\n        loader\n    }), {\n        width: widthInt,\n        height: heightInt,\n        decoding: \"async\",\n        \"data-nimg\": \"future\",\n        style: imgStyle,\n        className: className,\n        // @ts-ignore - TODO: upgrade to `@types/react@17`\n        loading: loading\n    }))));\n};\nfunction defaultLoader({ config , src , width , quality  }) {\n    if (true) {\n        const missingValues = [];\n        // these should always be provided but make sure they are\n        if (!src) missingValues.push(\"src\");\n        if (!width) missingValues.push(\"width\");\n        if (missingValues.length > 0) {\n            throw new Error(`Next Image Optimization requires ${missingValues.join(\", \")} to be provided. Make sure you pass them as props to the \\`next/image\\` component. Received: ${JSON.stringify({\n                src,\n                width,\n                quality\n            })}`);\n        }\n        if (src.startsWith(\"//\")) {\n            throw new Error(`Failed to parse src \"${src}\" on \\`next/image\\`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)`);\n        }\n        if (!src.startsWith(\"/\") && (config.domains || experimentalRemotePatterns)) {\n            let parsedSrc;\n            try {\n                parsedSrc = new URL(src);\n            } catch (err) {\n                console.error(err);\n                throw new Error(`Failed to parse src \"${src}\" on \\`next/image\\`, if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)`);\n            }\n            if (true) {\n                // We use dynamic require because this should only error in development\n                const { hasMatch  } = __webpack_require__(/*! ../../shared/lib/match-remote-pattern */ \"../shared/lib/match-remote-pattern\");\n                if (!hasMatch(config.domains, experimentalRemotePatterns, parsedSrc)) {\n                    throw new Error(`Invalid src prop (${src}) on \\`next/image\\`, hostname \"${parsedSrc.hostname}\" is not configured under images in your \\`next.config.js\\`\\n` + `See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host`);\n                }\n            }\n        }\n    }\n    if (src.endsWith(\".svg\") && !config.dangerouslyAllowSVG) {\n        // Special case to make svg serve as-is to avoid proxying\n        // through the built-in Image Optimization API.\n        return src;\n    }\n    return `${config.path}?url=${encodeURIComponent(src)}&w=${width}&q=${quality || 75}`;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=image.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/future/image.js\n");

/***/ }),

/***/ "./src/components/about.tsx":
/*!**********************************!*\
  !*** ./src/components/about.tsx ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_future_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/future/image */ \"./node_modules/next/future/image.js\");\n/* harmony import */ var next_future_image__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_future_image__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst about = ()=>{\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-screen\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                    className: \"max-w-[1240px] pt-36 pb-12 m-auto flex justify-center items-center\",\n                    children: \"Carlo D'Ugo\"\n                }, void 0, false, {\n                    fileName: \"/Users/cdugo/Desktop/Projects/personal-website/src/components/about.tsx\",\n                    lineNumber: 8,\n                    columnNumber: 13\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/cdugo/Desktop/Projects/personal-website/src/components/about.tsx\",\n                lineNumber: 7,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"max-w-5xl w-full mx-auto p-2\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_future_image__WEBPACK_IMPORTED_MODULE_2___default()), {\n                            src: \"/../public/aboutPic.png\",\n                            alt: \"/\",\n                            height: \"394\",\n                            width: \"420\",\n                            className: \"rounded float-left p-5\"\n                        }, void 0, false, {\n                            fileName: \"/Users/cdugo/Desktop/Projects/personal-website/src/components/about.tsx\",\n                            lineNumber: 14,\n                            columnNumber: 17\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"py-4 text-gray-400 m-auto\",\n                                    children: \"I just finished up an 8 month Software Engineer co-op at Moderna where I got to explore biotechnology and learn from intelligent contributors to a groundbreaking company with amazing tech.\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/cdugo/Desktop/Projects/personal-website/src/components/about.tsx\",\n                                    lineNumber: 22,\n                                    columnNumber: 21\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"py-4 pb-10 text-gray-400 m-auto\",\n                                    children: \"Right now, I'm working on building Chronos Capital Group, a hedge fund with an event-based trading strategy. I've wanted to get my feet wet in the FinTech world for a while, so this has been an amazing opportunity learning the intersection of finance and technology.\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/cdugo/Desktop/Projects/personal-website/src/components/about.tsx\",\n                                    lineNumber: 23,\n                                    columnNumber: 21\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/cdugo/Desktop/Projects/personal-website/src/components/about.tsx\",\n                            lineNumber: 21,\n                            columnNumber: 17\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/cdugo/Desktop/Projects/personal-website/src/components/about.tsx\",\n                    lineNumber: 13,\n                    columnNumber: 13\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/cdugo/Desktop/Projects/personal-website/src/components/about.tsx\",\n                lineNumber: 12,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/cdugo/Desktop/Projects/personal-website/src/components/about.tsx\",\n        lineNumber: 6,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (about);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hYm91dC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQXlCO0FBQ1k7QUFFckMsTUFBTUUsS0FBSyxHQUFHLElBQU07SUFDbEIscUJBQ0UsOERBQUNDLEtBQUc7UUFBQ0MsU0FBUyxFQUFDLGlCQUFpQjs7MEJBQzVCLDhEQUFDRCxLQUFHO2dCQUFDQyxTQUFTLEVBQUMsYUFBYTswQkFDeEIsNEVBQUNDLElBQUU7b0JBQUNELFNBQVMsRUFBQyxvRUFBb0U7OEJBQUMsYUFBVzs7Ozs7NkJBQUs7Ozs7O3lCQUNqRzswQkFHTiw4REFBQ0QsS0FBRztnQkFBQ0MsU0FBUyxFQUFDLDhCQUE4QjswQkFDekMsNEVBQUNELEtBQUc7O3NDQUNBLDhEQUFDRiwwREFBSzs0QkFDRkssR0FBRyxFQUFDLHlCQUF5Qjs0QkFDN0JDLEdBQUcsRUFBQyxHQUFHOzRCQUNQQyxNQUFNLEVBQUMsS0FBSzs0QkFDWkMsS0FBSyxFQUFDLEtBQUs7NEJBQ1hMLFNBQVMsRUFBQyx3QkFBd0I7Ozs7O3FDQUNwQztzQ0FDRiw4REFBQ0QsS0FBRzs7OENBQ0EsOERBQUNPLEdBQUM7b0NBQUNOLFNBQVMsRUFBQywyQkFBMkI7OENBQUMsOExBQTRMOzs7Ozs2Q0FBSTs4Q0FDek8sOERBQUNNLEdBQUM7b0NBQUNOLFNBQVMsRUFBQyxpQ0FBaUM7OENBQUMsNFFBQTBROzs7Ozs2Q0FBSTs7Ozs7O3FDQUMzVDs7Ozs7OzZCQUVKOzs7Ozt5QkFDSjs7Ozs7O2lCQUNKLENBQ1A7Q0FDRjtBQUVELGlFQUFlRixLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3d3LnNpZC5meWkvLi9zcmMvY29tcG9uZW50cy9hYm91dC50c3g/ZjBjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgSW1hZ2UgZnJvbSAnbmV4dC9mdXR1cmUvaW1hZ2UnXG5cbmNvbnN0IGFib3V0ID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIGgtc2NyZWVuXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJtYXgtdy1bMTI0MHB4XSBwdC0zNiBwYi0xMiBtLWF1dG8gZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXJcIj5DYXJsbyBEJ1VnbzwvaDI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXgtdy01eGwgdy1mdWxsIG14LWF1dG8gcC0yXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxJbWFnZVxuICAgICAgICAgICAgICAgICAgICBzcmM9XCIvLi4vcHVibGljL2Fib3V0UGljLnBuZ1wiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cIi9cIlxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIzOTRcIlxuICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjQyMFwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0ncm91bmRlZCBmbG9hdC1sZWZ0IHAtNSdcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInB5LTQgdGV4dC1ncmF5LTQwMCBtLWF1dG9cIj5JIGp1c3QgZmluaXNoZWQgdXAgYW4gOCBtb250aCBTb2Z0d2FyZSBFbmdpbmVlciBjby1vcCBhdCBNb2Rlcm5hIHdoZXJlIEkgZ290IHRvIGV4cGxvcmUgYmlvdGVjaG5vbG9neSBhbmQgbGVhcm4gZnJvbSBpbnRlbGxpZ2VudCBjb250cmlidXRvcnMgdG8gYSBncm91bmRicmVha2luZyBjb21wYW55IHdpdGggYW1hemluZyB0ZWNoLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicHktNCBwYi0xMCB0ZXh0LWdyYXktNDAwIG0tYXV0b1wiPlJpZ2h0IG5vdywgSSdtIHdvcmtpbmcgb24gYnVpbGRpbmcgQ2hyb25vcyBDYXBpdGFsIEdyb3VwLCBhIGhlZGdlIGZ1bmQgd2l0aCBhbiBldmVudC1iYXNlZCB0cmFkaW5nIHN0cmF0ZWd5LiBJJ3ZlIHdhbnRlZCB0byBnZXQgbXkgZmVldCB3ZXQgaW4gdGhlIEZpblRlY2ggd29ybGQgZm9yIGEgd2hpbGUsIHNvIHRoaXMgaGFzIGJlZW4gYW4gYW1hemluZyBvcHBvcnR1bml0eSBsZWFybmluZyB0aGUgaW50ZXJzZWN0aW9uIG9mIGZpbmFuY2UgYW5kIHRlY2hub2xvZ3kuPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFib3V0Il0sIm5hbWVzIjpbIlJlYWN0IiwiSW1hZ2UiLCJhYm91dCIsImRpdiIsImNsYXNzTmFtZSIsImgyIiwic3JjIiwiYWx0IiwiaGVpZ2h0Iiwid2lkdGgiLCJwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/about.tsx\n");

/***/ }),

/***/ "./src/pages/about.tsx":
/*!*****************************!*\
  !*** ./src/pages/about.tsx ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_about__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/about */ \"./src/components/about.tsx\");\n\n\nconst Home = function() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_about__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {}, void 0, false, {\n        fileName: \"/Users/cdugo/Desktop/Projects/personal-website/src/pages/about.tsx\",\n        lineNumber: 8,\n        columnNumber: 5\n    }, this);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Home);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvYWJvdXQudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUV1QztBQUV2QyxNQUFNQyxJQUFJLEdBQWEsV0FBWTtJQUVqQyxxQkFDRSw4REFBQ0QseURBQUs7Ozs7WUFBRyxDQUNUO0NBQ0g7QUFFRCxpRUFBZUMsSUFBSSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3d3LnNpZC5meWkvLi9zcmMvcGFnZXMvYWJvdXQudHN4PzczZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFBhZ2UgfSBmcm9tIFwibmV4dFwiO1xuaW1wb3J0IExpbmsgZnJvbSBcIkAvY29tcG9uZW50cy9saW5rXCI7XG5pbXBvcnQgQWJvdXQgZnJvbSBcIkAvY29tcG9uZW50cy9hYm91dFwiO1xuXG5jb25zdCBIb21lOiBOZXh0UGFnZSA9IGZ1bmN0aW9uICgpIHtcblxuICByZXR1cm4gKFxuICAgIDxBYm91dCAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSG9tZTtcbiJdLCJuYW1lcyI6WyJBYm91dCIsIkhvbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/pages/about.tsx\n");

/***/ }),

/***/ "./node_modules/next/future/image.js":
/*!*******************************************!*\
  !*** ./node_modules/next/future/image.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/client/future/image */ \"./node_modules/next/dist/client/future/image.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9mdXR1cmUvaW1hZ2UuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsMEhBQXVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3d3LnNpZC5meWkvLi9ub2RlX21vZHVsZXMvbmV4dC9mdXR1cmUvaW1hZ2UuanM/YzA0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Rpc3QvY2xpZW50L2Z1dHVyZS9pbWFnZScpXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/future/image.js\n");

/***/ }),

/***/ "../shared/lib/head":
/*!***********************************************!*\
  !*** external "next/dist/shared/lib/head.js" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/head.js");

/***/ }),

/***/ "../shared/lib/image-config-context":
/*!***************************************************************!*\
  !*** external "next/dist/shared/lib/image-config-context.js" ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/image-config-context.js");

/***/ }),

/***/ "../shared/lib/image-config":
/*!*******************************************************!*\
  !*** external "next/dist/shared/lib/image-config.js" ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/image-config.js");

/***/ }),

/***/ "../shared/lib/match-remote-pattern":
/*!***************************************************************!*\
  !*** external "next/dist/shared/lib/match-remote-pattern.js" ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/match-remote-pattern.js");

/***/ }),

/***/ "../utils":
/*!************************************************!*\
  !*** external "next/dist/shared/lib/utils.js" ***!
  \************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/utils.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./src/pages/about.tsx"));
module.exports = __webpack_exports__;

})();